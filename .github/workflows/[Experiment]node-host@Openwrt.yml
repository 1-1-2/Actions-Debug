#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: node-host @ Openwrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'download前进行SSH调试(true|false)'
        required: false
        default: 'false'
      TEST_AMOUNT:
        description: '并行测试数(免费用户并行作业数上限为20)'
        required: false
        default: '10'

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  UPLOAD_BIN_DIR: true
  TZ: Asia/Shanghai

jobs:
  Factory:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.setup_worker_matrix.outputs.json_content }}
    steps:
    - name: set-matrix
      id: setup_worker_matrix
      run: |
        json_content='{"include":['
        for i in $(seq 1 ${{ inputs.TEST_AMOUNT }}); do
          json_content="${json_content}{\"Worker_ID\":\"${i}\"},"
        done
        # 去掉最后一个逗号，然后封底
        json_content=${json_content%?}']}'
        echo "[json_content] ${json_content}"
        # 输出到output作为matrix
        # echo "::set-output name=json_content::${json_content}"
        echo "json_content=${json_content}" >> $GITHUB_OUTPUT
      
  worker:
    runs-on: ubuntu-22.04
    needs: Factory
    strategy:
      matrix: ${{fromJSON(needs.Factory.outputs.matrix)}}
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialize Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $DEPENDS 
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        # docker image prune -a -f
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT | tee /workdir/df.before
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Cache
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'false'
        prefix: ${{ github.workspace }}/openwrt

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Write Configuration
      run: |
        cd openwrt
        cat | tee .config <<- EOF
        # CONFIG_USE_MKLIBS is not set
        CONFIG_TARGET_ramips=y
        CONFIG_TARGET_ramips_mt7621=y
        CONFIG_TARGET_ramips_mt7621_DEVICE_d-team_newifi-d2=y
        CONFIG_PACKAGE_luci-app-transmission=y

        EOF

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        echo ============diff.config=============
        ./scripts/diffconfig.sh
        echo ====================================

        # 下载包，如若出错生成警告
        # 一轮八线程
        make download -j8 | tee make_download.log
        grep 'ERROR:' make_download.log | xargs -i echo "::warning:: [Download Trial 1]" {}
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        # 二轮单线程
        grep 'ERROR:' -q -m1 make_download.log && make download -j1 V=s | tee make_download.log
        grep 'ERROR:' make_download.log | xargs -i echo "::warning:: [Download Trial 2]" {}
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile
      id: compile
      run: |
        # 计时起点，启动打点计时器
        start_time=$(date +%s)
        ( while true; do echo "...Timer.$[ $(date +%s)-${start_time} ]s" >&2 && sleep 20; done ) &
        TIMER_PID=$!

        # 启动编译任务
        cd openwrt
        make -j1 V=s
        # 存点变量待用
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        # 复制配置文件到 bin/targets/[arch]/[subtarget]/ 目录，最终一并打包
        SUBTARGET_FOLDER=$(realpath bin/targets/*/*)
        cp -v .config ${SUBTARGET_FOLDER}/*

        # 计时终点，关闭打点计时器
        kill -15 $TIMER_PID
        end_time=$(date +%s)
        cost_time=$[ ${end_time}-${start_time} ]
        echo "==============================================="
        echo -ne "Start Time:\t${start_time}\nEnd Time:\t${end_time}\nCost Time:\t${cost_time}\n" | tee ${SUBTARGET_FOLDER}/Timer.log
        echo "==============================================="

    - name: Check Space Usage
      if: (!cancelled())
      working-directory: /workdir
      run: |
        echo "=======================BEFORE========================"
        cat ./df.before
        echo "========================AFTER========================"
        df -hT
        echo "========================FILE LIST========================"
        find ./openwrt -printf "%M\t%s\t%TF %Tr\t%P\n" -newer ./openwrt/.config

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.conclusion == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin
